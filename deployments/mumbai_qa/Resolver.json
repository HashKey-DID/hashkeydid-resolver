{
  "address": "0xB5949401A4d2Ff39CF409A45e796b3d39e613762",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "newAddress",
          "type": "bytes"
        }
      ],
      "name": "AddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "cid",
          "type": "bytes"
        }
      ],
      "name": "ContentHashChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "PubkeyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "indexedKey",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "TextChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        }
      ],
      "name": "addr",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "contentHash",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "DIDAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addr",
          "type": "address"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "pubkey",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "coinType",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_addr",
          "type": "bytes"
        }
      ],
      "name": "setAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setAvatar",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "cid",
          "type": "bytes"
        }
      ],
      "name": "setContentHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "x",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "y",
          "type": "bytes32"
        }
      ],
      "name": "setPubkey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "isReverse",
          "type": "bool"
        }
      ],
      "name": "setReverse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "setText",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "text",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf1c2243a27ea5507a9f9d4d4a043d27b7e8423704dcfeafd22bfa7ec1451e56",
  "receipt": {
    "to": null,
    "from": "0x425A0CB30cE4a914B3fED2683f992F8B7C9e9214",
    "contractAddress": "0xB5949401A4d2Ff39CF409A45e796b3d39e613762",
    "transactionIndex": 13,
    "gasUsed": "1067263",
    "logsBloom": "0x04000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000200000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000020000000000000000001000000000000000000000000004000000000000010000001000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xabb0dc1fef840fff3be32fa238c8881ce95d6c50fb4e29310272f4549e118ecb",
    "transactionHash": "0xdf1c2243a27ea5507a9f9d4d4a043d27b7e8423704dcfeafd22bfa7ec1451e56",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 31593799,
        "transactionHash": "0xdf1c2243a27ea5507a9f9d4d4a043d27b7e8423704dcfeafd22bfa7ec1451e56",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000425a0cb30ce4a914b3fed2683f992f8b7c9e9214",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000734d573326c9000000000000000000000000000000000000000000000000001ddee95c61c6549000000000000000000000000000000000000000000001949e747c463d677d48a00000000000000000000000000000000000000000000000001d6b9c052e9f8b9000000000000000000000000000000000000000000001949e74ef93949aa411a",
        "logIndex": 41,
        "blockHash": "0xabb0dc1fef840fff3be32fa238c8881ce95d6c50fb4e29310272f4549e118ecb"
      }
    ],
    "blockNumber": 31593799,
    "cumulativeGasUsed": "2205387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "059db68cc67b69e19b5291c4b84f619b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"newAddress\",\"type\":\"bytes\"}],\"name\":\"AddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"cid\",\"type\":\"bytes\"}],\"name\":\"ContentHashChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"PubkeyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"indexedKey\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"TextChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"}],\"name\":\"addr\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"contentHash\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"DIDAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"pubkey\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"coinType\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_addr\",\"type\":\"bytes\"}],\"name\":\"setAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setAvatar\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"cid\",\"type\":\"bytes\"}],\"name\":\"setContentHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"x\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"y\",\"type\":\"bytes32\"}],\"name\":\"setPubkey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReverse\",\"type\":\"bool\"}],\"name\":\"setReverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"setText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"text\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AddressChanged(uint256,uint256,bytes)\":{\"details\":\"Emitted when change address successfully \"},\"ContentHashChanged(uint256,bytes)\":{\"details\":\"Emitted when change content hash successfully \"},\"PubkeyChanged(uint256,bytes32,bytes32)\":{\"details\":\"Emitted when change public key hash successfully \"},\"TextChanged(uint256,string,string,string)\":{\"details\":\"Emitted when change text successfully \"}},\"kind\":\"dev\",\"methods\":{\"addr(uint256,uint256)\":{\"details\":\"Check address on different chain\",\"params\":{\"coinType\":\"the type of chains\",\"tokenId\":\"the tokenId to query\"}},\"contentHash(uint256)\":{\"details\":\"Check tokenId's content hash(ipfs/CID)\",\"params\":{\"tokenId\":\"The tokenId to query\"}},\"initialize(address)\":{\"details\":\"Initialize only once\",\"params\":{\"DIDAddr\":\"DID contract address\"}},\"name(address)\":{\"details\":\"Get the did name from the addr\",\"params\":{\"_addr\":\"address of user\"}},\"pubkey(uint256)\":{\"details\":\"Gets the SECP256k1 public key associated with a did\",\"params\":{\"tokenId\":\"the tokenId to query\"}},\"setAddr(uint256,uint256,bytes)\":{\"details\":\"Sets DID different address on different chain\",\"params\":{\"_addr\":\"the chain's address(bytes type)\",\"coinType\":\"the type of chains\",\"tokenId\":\"the tokenId to query\"}},\"setAvatar(uint256,string)\":{\"details\":\"Sets the avatar of did\",\"params\":{\"tokenId\":\"the tokenId to set\",\"value\":\"the value of info\"}},\"setContentHash(uint256,bytes)\":{\"details\":\"Sets tokenId's content hash(ipfs/CID)\",\"params\":{\"cid\":\"The hash value of content in the ipfs net\",\"tokenId\":\"The tokenId to query\"}},\"setPubkey(uint256,bytes32,bytes32)\":{\"details\":\"Sets the SECP256k1 public key associated with a did\",\"params\":{\"tokenId\":\"the tokenId to query\",\"x\":\"the X coordinate of the curve point for the public key\",\"y\":\"the Y coordinate of the curve point for the public key\"}},\"setReverse(bool)\":{\"details\":\"Set whether reverse the address to did\",\"params\":{\"isReverse\":\"true/false\"}},\"setText(uint256,string,string)\":{\"details\":\"Sets the text information associated with a did\",\"params\":{\"key\":\"the key of info\",\"tokenId\":\"the tokenId to query\",\"value\":\"the value of info\"}},\"text(uint256,string)\":{\"details\":\"Gets the text information associated with a did\",\"params\":{\"key\":\"the key of info\",\"tokenId\":\"the tokenId to query\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Resolver.sol\":\"Resolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x3798da9e212cd00a7cda94ddb5a9721171a718e89c500d8901f810e0e37fa74e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/Resolver.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ResolverStorage.sol\\\";\\n\\ninterface DID {\\n    function isAddrAuthorized(uint256 tokenId, address addr) external view returns (bool);\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n    function tokenId2Did(uint256 tokenId) external view returns (string memory);\\n}\\n\\ncontract Resolver is ResolverStorage, Initializable {\\n\\n    /// @dev Emitted when change address successfully \\n    event AddressChanged(uint256 tokenId, uint coinType, bytes newAddress);\\n    /// @dev Emitted when change content hash successfully \\n    event ContentHashChanged(uint256 indexed tokenId, bytes cid);\\n    /// @dev Emitted when change public key hash successfully \\n    event PubkeyChanged(uint256 indexed tokenId, bytes32 x, bytes32 y);\\n    /// @dev Emitted when change text successfully \\n    event TextChanged(uint256 indexed tokenId, string indexed indexedKey, string key, string value);\\n\\n    /// @dev Permits modifications only by the owner of tokenId\\n    modifier authorized(uint256 tokenId) {\\n        require(DID(did).ownerOf(tokenId) == msg.sender, \\\"authorize fail\\\");\\n        _;\\n    }\\n\\n    /// @dev Initialize only once\\n    /// @param DIDAddr DID contract address\\n    function initialize (\\n        address DIDAddr\\n    ) \\n        public \\n        initializer \\n    {\\n        did = DIDAddr;\\n    }\\n\\n    /// @dev Set whether reverse the address to did\\n    /// @param isReverse true/false\\n    function setReverse(bool isReverse) public {\\n        _isReverse[msg.sender] = isReverse;\\n    }\\n\\n    /// @dev Get the did name from the addr\\n    /// @param _addr address of user\\n    function name(address _addr) public view returns (string memory) {\\n        require(_isReverse[_addr], \\\"this addr has not set reverse record\\\");\\n        uint256 tokenId = DID(did).tokenOfOwnerByIndex(_addr, 0);\\n        return DID(did).tokenId2Did(tokenId);\\n    }\\n\\n    /// @dev Sets DID different address on different chain\\n    /// @param tokenId the tokenId to query\\n    /// @param coinType the type of chains\\n    /// @param _addr the chain's address(bytes type)\\n    function setAddr(uint256 tokenId, uint256 coinType, bytes memory _addr) public authorized(tokenId) {\\n        _addresses[tokenId][coinType] = _addr;\\n        emit AddressChanged(tokenId, coinType, _addr);\\n    }\\n\\n    /// @dev Check address on different chain\\n    /// @param tokenId the tokenId to query\\n    /// @param coinType the type of chains\\n    function addr(uint256 tokenId, uint256 coinType) public view returns(bytes memory) {\\n        return _addresses[tokenId][coinType];\\n    }\\n\\n    /// @dev Sets tokenId's content hash(ipfs/CID)\\n    /// @param tokenId The tokenId to query\\n    /// @param cid The hash value of content in the ipfs net\\n    function setContentHash(uint256 tokenId, bytes calldata cid) external authorized(tokenId) {\\n        _contentHashes[tokenId] = cid;\\n        emit ContentHashChanged(tokenId, cid);\\n    }\\n    \\n    /// @dev Check tokenId's content hash(ipfs/CID)\\n    /// @param tokenId The tokenId to query\\n    function contentHash(uint256 tokenId) external view returns (bytes memory) {\\n        return _contentHashes[tokenId];\\n    }\\n\\n    /// @dev Sets the SECP256k1 public key associated with a did\\n    /// @param tokenId the tokenId to query\\n    /// @param x the X coordinate of the curve point for the public key\\n    /// @param y the Y coordinate of the curve point for the public key\\n    function setPubkey(uint256 tokenId, bytes32 x, bytes32 y) external authorized(tokenId) {\\n        _pubkeys[tokenId] = PublicKey(x, y);\\n        emit PubkeyChanged(tokenId, x, y);\\n    }\\n\\n    /// @dev Gets the SECP256k1 public key associated with a did\\n    /// @param tokenId the tokenId to query\\n    function pubkey(uint256 tokenId) external view returns (bytes32 x, bytes32 y) {\\n        return (_pubkeys[tokenId].x, _pubkeys[tokenId].y);\\n    }\\n\\n    /// @dev Sets the text information associated with a did\\n    /// @param tokenId the tokenId to query\\n    /// @param key the key of info\\n    /// @param value the value of info\\n    function setText(uint256 tokenId, string calldata key, string calldata value) external authorized(tokenId) {\\n        _texts[tokenId][key] = value;\\n        emit TextChanged(tokenId, key, key, value);\\n    }\\n\\n    /// @dev Gets the text information associated with a did\\n    /// @param tokenId the tokenId to query\\n    /// @param key the key of info\\n    function text(uint256 tokenId, string calldata key) external view returns (string memory) {\\n        return _texts[tokenId][key];\\n    }\\n\\n    /// @dev Sets the avatar of did\\n    /// @param tokenId the tokenId to set\\n    /// @param value the value of info\\n    function setAvatar(uint256 tokenId, string calldata value) external {\\n        require(msg.sender == did, \\\"only did contract can set avatar\\\");\\n        _texts[tokenId][\\\"avatar\\\"] = value;\\n        emit TextChanged(tokenId, \\\"avatar\\\", \\\"avatar\\\", value);\\n    }\\n}\\n\",\"keccak256\":\"0x0010d574895528c9582d9b0e4a5a6dbf06364f177f84ee9630c5a070a9cb4563\",\"license\":\"LGPL-3.0-or-later\"},\"contracts/ResolverStorage.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ncontract ResolverStorage {\\n\\n    address did;\\n\\n    mapping(uint256 => mapping(uint256 => bytes)) _addresses;\\n\\n    mapping(uint256 => bytes) _contentHashes;\\n\\n    mapping(address => bool) _isReverse;\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n    \\n    mapping(uint256 => PublicKey) _pubkeys;\\n\\n    mapping(uint256 => mapping(string => string)) _texts;\\n}\\n\",\"keccak256\":\"0x6f8461d2cfe6ae9b9732fc5cb7d817a8af6b5eb7e0e32f197b91aee9692fc93e\",\"license\":\"LGPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611258806100206000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063724474cd11610071578063724474cd1461016d57806387beeb2b14610180578063ac8682ca14610193578063c4d66de8146101c1578063f0e44e75146101d4578063f3e0c290146101e757600080fd5b806301984892146100b95780630c1906ec146100e257806318d977f8146100f75780632cdfb6ae1461010a578063308e3386146101475780633fb247821461015a575b600080fd5b6100cc6100c7366004610d5c565b6101fa565b6040516100d99190611073565b60405180910390f35b6100f56100f0366004610e5c565b610383565b005b6100f5610105366004610e87565b610496565b610132610118366004610e2c565b600090815260046020526040902080546001909101549091565b604080519283526020830191909152016100d9565b6100cc610155366004610e87565b610588565b6100f5610168366004610ed1565b61064d565b6100cc61017b366004610f48565b610791565b6100f561018e366004610e87565b61083f565b6100f56101a1366004610d94565b336000908152600360205260409020805460ff1916911515919091179055565b6100f56101cf366004610d5c565b610932565b6100f56101e2366004610f69565b610a57565b6100cc6101f5366004610e2c565b610b66565b6001600160a01b03811660009081526003602052604090205460609060ff166102765760405162461bcd60e51b8152602060048201526024808201527f74686973206164647220686173206e6f7420736574207265766572736520726560448201526318dbdc9960e21b60648201526084015b60405180910390fd5b60008054604051632f745c5960e01b81526001600160a01b0385811660048301526024820184905290911690632f745c599060440160206040518083038186803b1580156102c357600080fd5b505afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610e44565b60005460405163c78826b760e01b8152600481018390529192506001600160a01b03169063c78826b79060240160006040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037c9190810190610db4565b9392505050565b6000546040516331a9108f60e11b815260048101859052849133916001600160a01b0390911690636352211e9060240160206040518083038186803b1580156103cb57600080fd5b505afa1580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190610d78565b6001600160a01b0316146104295760405162461bcd60e51b815260040161026d906110b8565b60408051808201825284815260208082018581526000888152600483528490209251835551600190920191909155815185815290810184905285917f8186dbd5b7b59a23cc021ac204ef3930b9d607bc737eb3559fa463d1c50bb14991015b60405180910390a250505050565b6000546040516331a9108f60e11b815260048101859052849133916001600160a01b0390911690636352211e9060240160206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190610d78565b6001600160a01b03161461053c5760405162461bcd60e51b815260040161026d906110b8565b6000848152600260205260409020610555908484610c08565b50837f2cfa0a96c5f362560b63aae3d9d8822b14c57d16b78c940ffc27774fd2d4e8508484604051610488929190611057565b60606005600085815260200190815260200160002083836040516105ad929190611047565b908152602001604051809103902080546105c6906111b9565b80601f01602080910402602001604051908101604052809291908181526020018280546105f2906111b9565b801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b505050505090509392505050565b6000546040516331a9108f60e11b815260048101879052869133916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190610d78565b6001600160a01b0316146106f35760405162461bcd60e51b815260040161026d906110b8565b8282600560008981526020019081526020016000208787604051610718929190611047565b908152604051908190036020019020610732929091610c08565b508484604051610743929190611047565b6040518091039020867fe219c694b6b58e5263cea71424d10e93e7dc7f2ec3a0291aa27009084fd05a8b878787876040516107819493929190611086565b60405180910390a3505050505050565b600082815260016020908152604080832084845290915290208054606091906107b9906111b9565b80601f01602080910402602001604051908101604052809291908181526020018280546107e5906111b9565b80156108325780601f1061080757610100808354040283529160200191610832565b820191906000526020600020905b81548152906001019060200180831161081557829003601f168201915b5050505050905092915050565b6000546001600160a01b031633146108995760405162461bcd60e51b815260206004820181905260248201527f6f6e6c792064696420636f6e74726163742063616e2073657420617661746172604482015260640161026d565b6000838152600560205260409081902090516530bb30ba30b960d11b8152839183916006019081526040519081900360200190206108d8929091610c08565b506040516530bb30ba30b960d11b81526006016040518091039020837fe219c694b6b58e5263cea71424d10e93e7dc7f2ec3a0291aa27009084fd05a8b84846040516109259291906110e0565b60405180910390a3505050565b600654610100900460ff16158080156109525750600654600160ff909116105b8061096c5750303b15801561096c575060065460ff166001145b6109cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161026d565b6006805460ff1916600117905580156109f2576006805461ff0019166101001790555b600080546001600160a01b0319166001600160a01b0384161790558015610a53576006805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000546040516331a9108f60e11b815260048101859052849133916001600160a01b0390911690636352211e9060240160206040518083038186803b158015610a9f57600080fd5b505afa158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190610d78565b6001600160a01b031614610afd5760405162461bcd60e51b815260040161026d906110b8565b600084815260016020908152604080832086845282529091208351610b2492850190610c8c565b507f88c6f12b5d80135a1513a91ef6bea8f1e2f7e880e6512ac5ca1e06d8c4cd9455848484604051610b5893929190611111565b60405180910390a150505050565b6000818152600260205260409020805460609190610b83906111b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610baf906111b9565b8015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b50505050509050919050565b828054610c14906111b9565b90600052602060002090601f016020900481019282610c365760008555610c7c565b82601f10610c4f5782800160ff19823516178555610c7c565b82800160010185558215610c7c579182015b82811115610c7c578235825591602001919060010190610c61565b50610c88929150610d00565b5090565b828054610c98906111b9565b90600052602060002090601f016020900481019282610cba5760008555610c7c565b82601f10610cd357805160ff1916838001178555610c7c565b82800160010185558215610c7c579182015b82811115610c7c578251825591602001919060010190610ce5565b5b80821115610c885760008155600101610d01565b60008083601f840112610d26578182fd5b50813567ffffffffffffffff811115610d3d578182fd5b602083019150836020828501011115610d5557600080fd5b9250929050565b600060208284031215610d6d578081fd5b813561037c8161120a565b600060208284031215610d89578081fd5b815161037c8161120a565b600060208284031215610da5578081fd5b8135801515811461037c578182fd5b600060208284031215610dc5578081fd5b815167ffffffffffffffff811115610ddb578182fd5b8201601f81018413610deb578182fd5b8051610dfe610df982611161565b611130565b818152856020838501011115610e12578384fd5b610e23826020830160208601611189565b95945050505050565b600060208284031215610e3d578081fd5b5035919050565b600060208284031215610e55578081fd5b5051919050565b600080600060608486031215610e70578182fd5b505081359360208301359350604090920135919050565b600080600060408486031215610e9b578283fd5b83359250602084013567ffffffffffffffff811115610eb8578283fd5b610ec486828701610d15565b9497909650939450505050565b600080600080600060608688031215610ee8578081fd5b85359450602086013567ffffffffffffffff80821115610f06578283fd5b610f1289838a01610d15565b90965094506040880135915080821115610f2a578283fd5b50610f3788828901610d15565b969995985093965092949392505050565b60008060408385031215610f5a578182fd5b50508035926020909101359150565b600080600060608486031215610f7d578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610fa1578182fd5b8401601f81018613610fb1578182fd5b8035610fbf610df982611161565b818152876020838501011115610fd3578384fd5b8160208401602083013783602083830101528093505050509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452611033816020860160208601611189565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60208152600061106b602083018486610ff2565b949350505050565b60208152600061037c602083018461101b565b60408152600061109a604083018688610ff2565b82810360208401526110ad818587610ff2565b979650505050505050565b6020808252600e908201526d185d5d1a1bdc9a5e994819985a5b60921b604082015260600190565b60408152600660408201526530bb30ba30b960d11b606082015260806020820152600061106b608083018486610ff2565b838152826020820152606060408201526000610e23606083018461101b565b604051601f8201601f1916810167ffffffffffffffff81118282101715611159576111596111f4565b604052919050565b600067ffffffffffffffff82111561117b5761117b6111f4565b50601f01601f191660200190565b60005b838110156111a457818101518382015260200161118c565b838111156111b3576000848401525b50505050565b600181811c908216806111cd57607f821691505b602082108114156111ee57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461121f57600080fd5b5056fea26469706673582212201841a73100325af86a843e9ce6e8f0507f893abf53c51a878853517aca851f5e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c8063724474cd11610071578063724474cd1461016d57806387beeb2b14610180578063ac8682ca14610193578063c4d66de8146101c1578063f0e44e75146101d4578063f3e0c290146101e757600080fd5b806301984892146100b95780630c1906ec146100e257806318d977f8146100f75780632cdfb6ae1461010a578063308e3386146101475780633fb247821461015a575b600080fd5b6100cc6100c7366004610d5c565b6101fa565b6040516100d99190611073565b60405180910390f35b6100f56100f0366004610e5c565b610383565b005b6100f5610105366004610e87565b610496565b610132610118366004610e2c565b600090815260046020526040902080546001909101549091565b604080519283526020830191909152016100d9565b6100cc610155366004610e87565b610588565b6100f5610168366004610ed1565b61064d565b6100cc61017b366004610f48565b610791565b6100f561018e366004610e87565b61083f565b6100f56101a1366004610d94565b336000908152600360205260409020805460ff1916911515919091179055565b6100f56101cf366004610d5c565b610932565b6100f56101e2366004610f69565b610a57565b6100cc6101f5366004610e2c565b610b66565b6001600160a01b03811660009081526003602052604090205460609060ff166102765760405162461bcd60e51b8152602060048201526024808201527f74686973206164647220686173206e6f7420736574207265766572736520726560448201526318dbdc9960e21b60648201526084015b60405180910390fd5b60008054604051632f745c5960e01b81526001600160a01b0385811660048301526024820184905290911690632f745c599060440160206040518083038186803b1580156102c357600080fd5b505afa1580156102d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102fb9190610e44565b60005460405163c78826b760e01b8152600481018390529192506001600160a01b03169063c78826b79060240160006040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037c9190810190610db4565b9392505050565b6000546040516331a9108f60e11b815260048101859052849133916001600160a01b0390911690636352211e9060240160206040518083038186803b1580156103cb57600080fd5b505afa1580156103df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104039190610d78565b6001600160a01b0316146104295760405162461bcd60e51b815260040161026d906110b8565b60408051808201825284815260208082018581526000888152600483528490209251835551600190920191909155815185815290810184905285917f8186dbd5b7b59a23cc021ac204ef3930b9d607bc737eb3559fa463d1c50bb14991015b60405180910390a250505050565b6000546040516331a9108f60e11b815260048101859052849133916001600160a01b0390911690636352211e9060240160206040518083038186803b1580156104de57600080fd5b505afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190610d78565b6001600160a01b03161461053c5760405162461bcd60e51b815260040161026d906110b8565b6000848152600260205260409020610555908484610c08565b50837f2cfa0a96c5f362560b63aae3d9d8822b14c57d16b78c940ffc27774fd2d4e8508484604051610488929190611057565b60606005600085815260200190815260200160002083836040516105ad929190611047565b908152602001604051809103902080546105c6906111b9565b80601f01602080910402602001604051908101604052809291908181526020018280546105f2906111b9565b801561063f5780601f106106145761010080835404028352916020019161063f565b820191906000526020600020905b81548152906001019060200180831161062257829003601f168201915b505050505090509392505050565b6000546040516331a9108f60e11b815260048101879052869133916001600160a01b0390911690636352211e9060240160206040518083038186803b15801561069557600080fd5b505afa1580156106a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cd9190610d78565b6001600160a01b0316146106f35760405162461bcd60e51b815260040161026d906110b8565b8282600560008981526020019081526020016000208787604051610718929190611047565b908152604051908190036020019020610732929091610c08565b508484604051610743929190611047565b6040518091039020867fe219c694b6b58e5263cea71424d10e93e7dc7f2ec3a0291aa27009084fd05a8b878787876040516107819493929190611086565b60405180910390a3505050505050565b600082815260016020908152604080832084845290915290208054606091906107b9906111b9565b80601f01602080910402602001604051908101604052809291908181526020018280546107e5906111b9565b80156108325780601f1061080757610100808354040283529160200191610832565b820191906000526020600020905b81548152906001019060200180831161081557829003601f168201915b5050505050905092915050565b6000546001600160a01b031633146108995760405162461bcd60e51b815260206004820181905260248201527f6f6e6c792064696420636f6e74726163742063616e2073657420617661746172604482015260640161026d565b6000838152600560205260409081902090516530bb30ba30b960d11b8152839183916006019081526040519081900360200190206108d8929091610c08565b506040516530bb30ba30b960d11b81526006016040518091039020837fe219c694b6b58e5263cea71424d10e93e7dc7f2ec3a0291aa27009084fd05a8b84846040516109259291906110e0565b60405180910390a3505050565b600654610100900460ff16158080156109525750600654600160ff909116105b8061096c5750303b15801561096c575060065460ff166001145b6109cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161026d565b6006805460ff1916600117905580156109f2576006805461ff0019166101001790555b600080546001600160a01b0319166001600160a01b0384161790558015610a53576006805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6000546040516331a9108f60e11b815260048101859052849133916001600160a01b0390911690636352211e9060240160206040518083038186803b158015610a9f57600080fd5b505afa158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190610d78565b6001600160a01b031614610afd5760405162461bcd60e51b815260040161026d906110b8565b600084815260016020908152604080832086845282529091208351610b2492850190610c8c565b507f88c6f12b5d80135a1513a91ef6bea8f1e2f7e880e6512ac5ca1e06d8c4cd9455848484604051610b5893929190611111565b60405180910390a150505050565b6000818152600260205260409020805460609190610b83906111b9565b80601f0160208091040260200160405190810160405280929190818152602001828054610baf906111b9565b8015610bfc5780601f10610bd157610100808354040283529160200191610bfc565b820191906000526020600020905b815481529060010190602001808311610bdf57829003601f168201915b50505050509050919050565b828054610c14906111b9565b90600052602060002090601f016020900481019282610c365760008555610c7c565b82601f10610c4f5782800160ff19823516178555610c7c565b82800160010185558215610c7c579182015b82811115610c7c578235825591602001919060010190610c61565b50610c88929150610d00565b5090565b828054610c98906111b9565b90600052602060002090601f016020900481019282610cba5760008555610c7c565b82601f10610cd357805160ff1916838001178555610c7c565b82800160010185558215610c7c579182015b82811115610c7c578251825591602001919060010190610ce5565b5b80821115610c885760008155600101610d01565b60008083601f840112610d26578182fd5b50813567ffffffffffffffff811115610d3d578182fd5b602083019150836020828501011115610d5557600080fd5b9250929050565b600060208284031215610d6d578081fd5b813561037c8161120a565b600060208284031215610d89578081fd5b815161037c8161120a565b600060208284031215610da5578081fd5b8135801515811461037c578182fd5b600060208284031215610dc5578081fd5b815167ffffffffffffffff811115610ddb578182fd5b8201601f81018413610deb578182fd5b8051610dfe610df982611161565b611130565b818152856020838501011115610e12578384fd5b610e23826020830160208601611189565b95945050505050565b600060208284031215610e3d578081fd5b5035919050565b600060208284031215610e55578081fd5b5051919050565b600080600060608486031215610e70578182fd5b505081359360208301359350604090920135919050565b600080600060408486031215610e9b578283fd5b83359250602084013567ffffffffffffffff811115610eb8578283fd5b610ec486828701610d15565b9497909650939450505050565b600080600080600060608688031215610ee8578081fd5b85359450602086013567ffffffffffffffff80821115610f06578283fd5b610f1289838a01610d15565b90965094506040880135915080821115610f2a578283fd5b50610f3788828901610d15565b969995985093965092949392505050565b60008060408385031215610f5a578182fd5b50508035926020909101359150565b600080600060608486031215610f7d578283fd5b8335925060208401359150604084013567ffffffffffffffff811115610fa1578182fd5b8401601f81018613610fb1578182fd5b8035610fbf610df982611161565b818152876020838501011115610fd3578384fd5b8160208401602083013783602083830101528093505050509250925092565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60008151808452611033816020860160208601611189565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b60208152600061106b602083018486610ff2565b949350505050565b60208152600061037c602083018461101b565b60408152600061109a604083018688610ff2565b82810360208401526110ad818587610ff2565b979650505050505050565b6020808252600e908201526d185d5d1a1bdc9a5e994819985a5b60921b604082015260600190565b60408152600660408201526530bb30ba30b960d11b606082015260806020820152600061106b608083018486610ff2565b838152826020820152606060408201526000610e23606083018461101b565b604051601f8201601f1916810167ffffffffffffffff81118282101715611159576111596111f4565b604052919050565b600067ffffffffffffffff82111561117b5761117b6111f4565b50601f01601f191660200190565b60005b838110156111a457818101518382015260200161118c565b838111156111b3576000848401525b50505050565b600181811c908216806111cd57607f821691505b602082108114156111ee57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461121f57600080fd5b5056fea26469706673582212201841a73100325af86a843e9ce6e8f0507f893abf53c51a878853517aca851f5e64736f6c63430008040033",
  "devdoc": {
    "events": {
      "AddressChanged(uint256,uint256,bytes)": {
        "details": "Emitted when change address successfully "
      },
      "ContentHashChanged(uint256,bytes)": {
        "details": "Emitted when change content hash successfully "
      },
      "PubkeyChanged(uint256,bytes32,bytes32)": {
        "details": "Emitted when change public key hash successfully "
      },
      "TextChanged(uint256,string,string,string)": {
        "details": "Emitted when change text successfully "
      }
    },
    "kind": "dev",
    "methods": {
      "addr(uint256,uint256)": {
        "details": "Check address on different chain",
        "params": {
          "coinType": "the type of chains",
          "tokenId": "the tokenId to query"
        }
      },
      "contentHash(uint256)": {
        "details": "Check tokenId's content hash(ipfs/CID)",
        "params": {
          "tokenId": "The tokenId to query"
        }
      },
      "initialize(address)": {
        "details": "Initialize only once",
        "params": {
          "DIDAddr": "DID contract address"
        }
      },
      "name(address)": {
        "details": "Get the did name from the addr",
        "params": {
          "_addr": "address of user"
        }
      },
      "pubkey(uint256)": {
        "details": "Gets the SECP256k1 public key associated with a did",
        "params": {
          "tokenId": "the tokenId to query"
        }
      },
      "setAddr(uint256,uint256,bytes)": {
        "details": "Sets DID different address on different chain",
        "params": {
          "_addr": "the chain's address(bytes type)",
          "coinType": "the type of chains",
          "tokenId": "the tokenId to query"
        }
      },
      "setAvatar(uint256,string)": {
        "details": "Sets the avatar of did",
        "params": {
          "tokenId": "the tokenId to set",
          "value": "the value of info"
        }
      },
      "setContentHash(uint256,bytes)": {
        "details": "Sets tokenId's content hash(ipfs/CID)",
        "params": {
          "cid": "The hash value of content in the ipfs net",
          "tokenId": "The tokenId to query"
        }
      },
      "setPubkey(uint256,bytes32,bytes32)": {
        "details": "Sets the SECP256k1 public key associated with a did",
        "params": {
          "tokenId": "the tokenId to query",
          "x": "the X coordinate of the curve point for the public key",
          "y": "the Y coordinate of the curve point for the public key"
        }
      },
      "setReverse(bool)": {
        "details": "Set whether reverse the address to did",
        "params": {
          "isReverse": "true/false"
        }
      },
      "setText(uint256,string,string)": {
        "details": "Sets the text information associated with a did",
        "params": {
          "key": "the key of info",
          "tokenId": "the tokenId to query",
          "value": "the value of info"
        }
      },
      "text(uint256,string)": {
        "details": "Gets the text information associated with a did",
        "params": {
          "key": "the key of info",
          "tokenId": "the tokenId to query"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 869,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "did",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 875,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_addresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))"
      },
      {
        "astId": 879,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_contentHashes",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes_storage)"
      },
      {
        "astId": 883,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_isReverse",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 893,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_pubkeys",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PublicKey)888_storage)"
      },
      {
        "astId": 899,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_texts",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_string_storage))"
      },
      {
        "astId": 6,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_initialized",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Resolver.sol:Resolver",
        "label": "_initializing",
        "offset": 1,
        "slot": "6",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_string_memory_ptr,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(string => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_string_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bytes_storage)"
      },
      "t_mapping(t_uint256,t_struct(PublicKey)888_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ResolverStorage.PublicKey)",
        "numberOfBytes": "32",
        "value": "t_struct(PublicKey)888_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(PublicKey)888_storage": {
        "encoding": "inplace",
        "label": "struct ResolverStorage.PublicKey",
        "members": [
          {
            "astId": 885,
            "contract": "contracts/Resolver.sol:Resolver",
            "label": "x",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 887,
            "contract": "contracts/Resolver.sol:Resolver",
            "label": "y",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}